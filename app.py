import streamlit as st
import google.generativeai as genai
import os

# Configura√ß√µes iniciais do Streamlit
st.set_page_config(page_title="Gerador de Flashcards ENEM", layout="centered")

# --- Fun√ß√£o de Gera√ß√£o de Prompt ---
def gerar_prompt(assunto, materia, bullet_topics, output_format, card_detail_level, question_style, content_focus, language,
                 include_common_mistakes, tags, difficulty_level, include_exam_context):
    prompt = f"""
Voc√™ √© um assistente especializado em criar flashcards de estudo para o ENEM, com sa√≠da pronta para download como arquivo .txt, formatado para importa√ß√£o direta no AnkiDroid.

üìå DADOS DO USU√ÅRIO:
- Assunto Principal: {assunto}
- Mat√©ria: {materia}
- T√≥picos com Detalhamento (incluindo sub-t√≥picos, se houver):
{bullet_topics}

---

üìå INSTRU√á√ïES ABSOLUTAS SOBRE O FORMATO DE ENTREGA:

‚úÖ Sua resposta deve ser entregue como um arquivo de texto (.txt), pronto para o usu√°rio baixar imediatamente.

‚úÖ Nome do arquivo: **flashcards_ENEM.txt**

‚úÖ Formato de cada linha do arquivo:

- Cada flashcard deve ocupar uma √∫nica linha.
- Campo 1: Frente da pergunta.
- Campo 2: Verso da resposta completa (explica√ß√£o, grau de dificuldade, contexto ENEM, exemplos, etc).
- **CR√çTICO: Os campos DEVEM ser separados EXCLUSIVAMENTE por UM caractere real de TABULA√á√ÉO (TAB real - ASCII 9). JAMAIS use quebras de linha, espa√ßos extras, ou outros delimitadores para separar os campos. APENAS TAB REAL.**
- N√£o use caracteres como "\\t" para simular tab, use o caractere de tabula√ß√£o literal.

‚úÖ Regras sobre o conte√∫do de cada campo:

- **Nenhum campo deve conter quebras de linha internas. Absolutamente nenhuma nova linha dentro da pergunta ou da resposta. Todas as informa√ß√µes de um campo devem estar em uma √∫nica linha cont√≠nua.**
- Toda a resposta (verso) deve ser entregue numa √∫nica linha.
- As respostas podem ser longas, com explica√ß√µes detalhadas, mas devem permanecer dentro de um s√≥ campo, sem quebras de linha.

‚úÖ Estrutura de conte√∫do por flashcard:

- Pergunta clara e objetiva (frente).
- Resposta completa e bem explicada (verso).
- Ao final da resposta, inclua **OBRIGATORIAMENTE**:
  - Grau de Dificuldade: (B√°sico / Intermedi√°rio / Avan√ßado)
  - Contexto ENEM: (Explique como o tema costuma ser cobrado na prova)

‚úÖ O n√∫mero de flashcards deve ser adequado ao n√≠vel de detalhamento dos t√≥picos e sub-t√≥picos informados.

‚úÖ N√£o inclua:
- Cabe√ßalhos
- Numera√ß√µes de flashcards
- Textos de introdu√ß√£o
- Instru√ß√µes (como esta)
- Mensagens extras antes ou depois das linhas de flashcards.

‚úÖ ENTREGUE APENAS O CONTE√öDO DO ARQUIVO .TXT, PRONTO PARA DOWNLOAD.
‚úÖ A resposta deve come√ßar imediatamente com o primeiro flashcard, sem pre√¢mbulos ou qualquer texto antes da primeira linha de flashcard.

---

üìå EXEMPLO EXATO DE COMO CADA LINHA DO ARQUIVO DEVE FICAR (SEPARADO POR TAB REAL):

O que √© fotoss√≠ntese?    √â o processo pelo qual plantas, algas e algumas bact√©rias convertem energia solar em energia qu√≠mica, produzindo glicose e oxig√™nio. Grau: B√°sico. Contexto ENEM: O ENEM costuma cobrar rela√ß√µes entre fotoss√≠ntese e o ciclo do carbono, al√©m de impactos ambientais.
Quais s√£o as etapas da fotoss√≠ntese?    A fotoss√≠ntese ocorre em duas etapas principais: fase clara (captura de energia solar e produ√ß√£o de ATP e NADPH) e fase escura (fixa√ß√£o do carbono para formar glicose). Grau: Intermedi√°rio. Contexto ENEM: Costuma aparecer em quest√µes sobre metabolismo energ√©tico em vegetais.

---

üìå SA√çDA FINAL OBRIGAT√ìRIA:
Sa√≠da esperada: um arquivo de texto para download.
‚úÖ Apenas o arquivo .txt, com os flashcards no formato exato acima.
‚úÖ Nenhum texto adicional.
‚úÖ Entregue de forma que o usu√°rio possa fazer o download direto.
"""
    return prompt.strip()

# --- Fun√ß√£o para chamar a API do Gemini ---
def get_flashcards_from_gemini(prompt):
    try:
        # Verifica se a chave de API est√° configurada nos Streamlit Secrets
        if "GEMINI_API_KEY" not in st.secrets:
            st.error("Chave de API do Gemini n√£o encontrada nos Streamlit Secrets. Por favor, adicione-a.")
            return None

        genai.configure(api_key=st.secrets["GEMINI_API_KEY"])

        # Usando o modelo gemini-1.5-pro-latest, que √© robusto para seguir instru√ß√µes
        model_name_to_use = 'models/gemini-1.5-flash-latest'
        
        # Opcional: Para depura√ß√£o, pode descomentar a linha abaixo para ver qual modelo est√° sendo usado
        # st.info(f"Usando o modelo: {model_name_to_use}")

        model = genai.GenerativeModel(model_name_to_use)

        response = model.generate_content(prompt)
        
        if response and hasattr(response, 'text'):
            return response.text
        else:
            st.error("A IA retornou uma resposta vazia ou em formato inesperado.")
            # Para debug, exibe a resposta bruta da IA se estiver vazia
            st.write(f"Resposta bruta da IA: {response}") 
            return None

    except Exception as e:
        st.error(f"Ocorreu um erro ao chamar a IA: {e}")
        st.info("Verifique se sua chave de API do Gemini est√° configurada corretamente nos Streamlit Secrets e se o modelo que estamos tentando usar est√° acess√≠vel para sua conta/regi√£o.")
        return None

# --- Fun√ß√£o de P√≥s-processamento para garantir o formato correto ---
def clean_flashcard_output(raw_text):
    cleaned_lines = []
    # Divide o texto em linhas
    lines = raw_text.split('\n')
    
    for line in lines:
        line = line.strip() # Remove espa√ßos e quebras de linha no in√≠cio/fim da linha

        # Ignora linhas vazias
        if not line:
            continue
        
        # Substitui qualquer quebra de linha ou retorno de carro remanescente DENTRO de uma linha
        # por um espa√ßo, para garantir que o conte√∫do do campo esteja em uma √∫nica linha.
        line = line.replace('\n', ' ').replace('\r', ' ').strip()
        
        # Garante que haja apenas um tab entre a pergunta e a resposta.
        # Isso √© uma heur√≠stica caso a IA falhe em usar um tab, mas use espa√ßos ou m√∫ltiplos tabs.
        # O ideal √© que a IA j√° entregue no formato correto, mas isso √© uma seguran√ßa.
        parts = line.split('\t') # Divide por todos os tabs
        
        if len(parts) >= 2: # Se encontrou pelo menos um tab, assume que os campos est√£o l√°
            # Juntar as partes com um √∫nico tab, garantindo que n√£o haja tabs extras
            # e que o conte√∫do de cada parte esteja limpo de novas linhas internas.
            cleaned_part_0 = parts[0].strip()
            cleaned_part_1 = " ".join(part.strip() for part in parts[1:]) # Junta o restante como a parte da resposta
            
            cleaned_lines.append(f"{cleaned_part_0}\t{cleaned_part_1}")
        else:
            # Se n√£o encontrou tab (ex: a IA usou 'enter' ou s√≥ espa√ßos), isso √© um problema maior.
            # Aqui, para o AnkiDroid, a √∫nica forma de garantir √© que cada linha seja um flashcard
            # ou que se tente uma heur√≠stica para dividir a linha em dois campos.
            # No contexto do Anki, se n√£o h√° um tab, a linha inteira pode virar a frente.
            # O mais seguro √© que a IA gere o tab. Este p√≥s-processamento foca em limpar *novas linhas internas*.
            # Se a IA consistentemente n√£o usa tabs, o prompt precisa de mais ajustes ainda.
            
            # Para este cen√°rio, se n√£o h√° tab, vamos assumir que a linha inteira √© um campo
            # e vamos deix√°-la como est√°, pois pode ser uma linha de flashcard "quebrada"
            # que a IA deveria ter formatado com tab.
            # No entanto, a instru√ß√£o do prompt √© para ter TAB. Se n√£o tiver, o Anki falha.
            # Portanto, a corre√ß√£o principal √© o prompt. Este p√≥s-processamento ajuda no 'inner-newline'.
            if line: # Adiciona a linha s√≥ se ela n√£o estiver vazia ap√≥s o strip
                 cleaned_lines.append(line)

    # Rejunta as linhas para o download, separadas por '\n'
    return "\n".join(cleaned_lines)

# --- Interface Principal do Streamlit ---
def main():
    st.title("üìá Gerador de Flashcards ENEM (com IA)")
    st.markdown("Configure seus flashcards e deixe a IA ger√°-los para voc√™, prontos para importa√ß√£o no AnkiDroid!")

    st.markdown("---")
    st.subheader("üìù Dados do Flashcard")

    assunto = st.text_input("Assunto Principal (ex: Geomorfologia):", placeholder="Geomorfologia")
    materia = st.text_input("Mat√©ria (ex: Geografia):", placeholder="Geografia")

    st.markdown("---")
    st.subheader("üìö T√≥picos Detalhados")
    st.markdown("""
    Digite os t√≥picos com detalhamento (incluindo sub-t√≥picos, se quiser).
    **Formato sugerido:**
    ```
    Terremotos: como ocorrem; tipos;
    Din√¢mica de Placas:
    Orog√™nese: converg√™ncia, diverg√™ncia;
    Epirog√™nese: positiva, negativa
    ```
    """)
    bullet_topics = st.text_area("T√≥picos:", height=200, placeholder="Digite seus t√≥picos aqui, um por linha ou com sub-t√≥picos.")

    st.markdown("---")
    st.subheader("‚öôÔ∏è Configura√ß√µes Adicionais")

    col1, col2 = st.columns(2)

    with col1:
        output_formats = [
            "txt com tabula√ß√£o para AnkiDroid"
        ]
        output_format = st.selectbox("Formato de sa√≠da:", output_formats, help="O prompt √© otimizado para .txt com tabula√ß√£o para AnkiDroid.")

        card_detail_levels = [
            "1 flashcard resumo por t√≥pico",
            "m√∫ltiplos flashcards detalhados por t√≥pico"
        ]
        card_detail_level = st.selectbox("N√∫mero de flashcards por t√≥pico:", card_detail_levels)

        question_styles = [
            "Direto",
            "Contextual",
            "Misto"
        ]
        question_style = st.selectbox("Estilo das perguntas:", question_styles)

    with col2:
        content_focuses = [
            "Defini√ß√µes conceituais",
            "Exemplos de aplica√ß√£o no ENEM",
            "Erros comuns e pegadinhas",
            "Defini√ß√µes + Exemplos",
            "Defini√ß√µes + Exemplos + Erros comuns"
        ]
        content_focus = st.selectbox("Foco do conte√∫do:", content_focuses)

        languages = [
            "Portugu√™s (Brasil)",
            "Ingl√™s",
            "Espanhol"
        ]
        language = st.selectbox("Idioma:", languages)

    st.markdown("---")
    st.subheader("‚ûï Op√ß√µes de Conte√∫do")

    col3, col4 = st.columns(2)
    with col3:
        include_common_mistakes = st.checkbox("Incluir erros comuns e pegadinhas?", value=True)
        tags = st.checkbox("Adicionar tags por tema?", value=True)
    with col4:
        difficulty_level = st.checkbox("Indicar grau de dificuldade (B√°sico/Intermedi√°rio/Avan√ßado)?", value=True)
        include_exam_context = st.checkbox("Incluir contexto de prova (ex: como o ENEM cobra esse tema)?", value=True)

    st.markdown("---")

    # Bot√£o para gerar os flashcards
    if st.button("‚ú® Gerar Flashcards com IA"):
        if not assunto or not materia or not bullet_topics.strip():
            st.warning("Por favor, preencha o Assunto Principal, a Mat√©ria e os T√≥picos para gerar os flashcards.")
        else:
            # Convertendo os booleanos de volta para "Sim"/"N√£o" para a fun√ß√£o gerar_prompt
            _include_common_mistakes = "Sim" if include_common_mistakes else "N√£o"
            _tags = "Sim" if tags else "N√£o"
            _difficulty_level = "Sim" if difficulty_level else "N√£o"
            _include_exam_context = "Sim" if include_exam_context else "N√£o"

            # Gera o prompt
            prompt_para_ia = gerar_prompt(
                assunto, materia, bullet_topics, output_format, card_detail_level, question_style, content_focus,
                language, _include_common_mistakes, _tags, _difficulty_level, _include_exam_context
            )

            with st.spinner("Gerando seus flashcards... isso pode levar um momento. ‚è≥"):
                # Chama a IA com o prompt
                flashcards_raw_text = get_flashcards_from_gemini(prompt_para_ia)

            if flashcards_raw_text:
                # Aplica a fun√ß√£o de p√≥s-processamento para garantir o formato
                flashcards_final_text = clean_flashcard_output(flashcards_raw_text)
                
                st.subheader("‚úÖ Flashcards Gerados!")
                st.text_area("Conte√∫do dos Flashcards:", flashcards_final_text, height=300)

                # Bot√£o para download do arquivo .txt
                st.download_button(
                    label="üíæ Baixar Flashcards (.txt para AnkiDroid)",
                    data=flashcards_final_text.encode('utf-8'), # Use o texto final limpo aqui
                    file_name="flashcards_ENEM.txt",
                    mime="text/plain"
                )
                st.success("Seus flashcards est√£o prontos! Baixe o arquivo e importe no AnkiDroid.")
            else:
                st.error("N√£o foi poss√≠vel gerar os flashcards. Por favor, tente novamente ou verifique as configura√ß√µes da API.")

if __name__ == "__main__":
    main()